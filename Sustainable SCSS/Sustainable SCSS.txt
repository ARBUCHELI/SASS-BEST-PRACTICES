# SUSTAINABLE SCSS
------------------

* Sasstainability
-----------------
Sass can be confusing if it’s not organized correctly. In this unit, we will dive into the language’s best practices.

From file organization, to understanding when is best to include a mixin or extend a placeholder, we will learn about the methods that get the most out of Sass.

----------------------------------------------------------------------------------------------------------------------------------------------------------------

* Sass Structure
----------------
We’ll start with best practices for organizing files. As your web app or web page grows in complexity, so will the styles that go along with it. It’s best to keep code organized.

* Instructions
--------------
Here we have an example of a well-organized Sass file structure. Notice how the file structure makes it easy to think of the functionality of each component, facilitating the action of 
finding and updating files.

----------------------------------------------------------------------------------------------------------------------------------------------------------------

* @Import in SCSS
-----------------
In addition to having a solid file structure, a big part of staying organized is splitting up the logic into smaller manageable components.

Sass extends the existing CSS @import rule to allow including other SCSS and Sass files.

	. Typically, all imported SCSS files are imported into a main SCSS file which is then combined to make a single CSS output file.

	. The main/global SCSS file has access to any variables or mixins defined in its imported files. The `@import command takes a filename to import.

By default, @import looks for a Sass file in the same or otherwise specified directory but there are a few circumstances where it will behave just like a CSS @import rule:

	. If the file’s extension is .css.

	. If the filename begins with http://.

	. If the filename is a url().
	
	. If the @import has any media queries.

In addition to keeping code organized, importing files can also save you from repeating code. For example, if multiple SCSS files reference the same variables, importing a file with 
variables partial would save the trouble of redefining them each time.

* Instructions
--------------
Analyze the file architecture currently set up for the project by clicking on the file icon on the top left hand corner of your code editor. You will be using this to navigate between 
files.

The lemonade stand is a smaller project, so we have only set up a helper folder. As it grows, we could add partials for _pages, _components and more!

main.scss
---------
@import url(https://fonts.googleapis.com/css?family=Pacifico); //CSS import
@import "helper/placeholders";
@import "helper/mixins";

h1 {
  font-family: Roboto, sans-serif;
  @include center;
}

.banner {
  font-family: 'Pacifico', cursive;
  height: 400px;
  background-image: url($lemonade-banner);
  border: {
    top: $border;
    bottom: $border;
  } 

  .slogan {
    background-color: $translucent-white;
    border: 4px solid black;
    top: 200px;
    left: 25%;
    line-height: 200px;
    @include dimensions(50%, 200px);

    span {
      @include center;
      width: 40%;
      left: 30%;
    }
  }
}

.container {
  font-family: 'Pacifico', cursive;

  .icon {
    display: inline-block;
    margin: 2%;
    border: $border;
    @include dimensions(300px, 300px);
  }
}

index.html
----------
<link rel="stylesheet" type="text/css" href="sass/main.css">
<h1>LEMONADE</h1>

<div class="banner">
  <div class="slogan">
    <span>
      homemade with fresh ingredients
    </span>
  </div>  
</div>
  
<div class="container">
  <div class="icon">
    fresh lemons
    <img src="https://content.codecademy.com/courses/Sass/lemon.png">
  </div>
  <div class="icon">
    real sugar
    <img src="https://content.codecademy.com/courses/Sass/lemon.png">
  </div>
  <div class="icon">
    dad's recipe
    <img src="https://content.codecademy.com/courses/Sass/lemon.png">
  </div>
</div> 

sass/main.css
-------------
@import url(https://fonts.googleapis.com/css?family=Pacifico);
h1 {
  font-family: Roboto, sans-serif;
  text-align: center;
  vertical-align: middle; }

.banner {
  font-family: 'Pacifico', cursive;
  height: 400px; }
  .banner .slogan {
    border: 4px solid black;
    top: 200px;
    left: 25%;
    width: 50%;
    height: 200px;
    line-height: 200px; }
    .banner .slogan span {
      text-align: center;
      vertical-align: middle;
      width: 40%;
      left: 30%; }

.container {
  font-family: 'Pacifico', cursive; }
  .container .icon {
    display: inline-block;
    margin: 2%;
    width: 300px;
    height: 300px; }

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Organize with Partials
------------------------
Partials in Sass are the files you split up to organize specific functionality in the codebase.

	. They use a _ prefix notation in the file name that tells Sass to hold off on compiling the file individually and instead import it.

		_filename.scss

	. To import this partial into the main file - or the file that encapsulates the important rules and the bulk of the project styles - omit the underscore.

For example, to import a file named _variables.scss, add the following line of code:

	@import "variables";

The global file imports all the components and centralizes the logic.

* Instructions
--------------
Checkpoint 1 Passed
1.
At the top of main.scss, import the variables partial:

    @import "helper/variables";

A reminder that helper refers to resources like variables, mixins, functions, etc. These are the elements that “help” make up the foundation of your codebase as it grows.

Click “Run” to see your changes in the browser and inspect them in the output of main.css.

main.scss
---------
@import url(https://fonts.googleapis.com/css?family=Pacifico); //CSS import
@import "helper/placeholders";
@import "helper/mixins";
@import "helper/variables";

h1 {
  font-family: Roboto, sans-serif;
  @include center;
}

.banner {
  font-family: 'Pacifico', cursive;
  height: 400px;
  background-image: url($lemonade-banner);
  border: {
    top: $border;
    bottom: $border;
  } 

  .slogan {
    background-color: $translucent-white;
    border: 4px solid black;
    top: 200px;
    left: 25%;
    line-height: 200px;
    @include dimensions(50%, 200px);

    span {
      @include center;
      width: 40%;
      left: 30%;
    }
  }
}

.container {
  font-family: 'Pacifico', cursive;

  .icon {
    display: inline-block;
    margin: 2%;
    border: $border;
    @include dimensions(300px, 300px);
  }
}

index.html
----------
<link rel="stylesheet" type="text/css" href="sass/main.css">
<h1>LEMONADE</h1>

<div class="banner">
  <div class="slogan">
    <span>
      homemade with fresh ingredients
    </span>
  </div>  
</div>
  
<div class="container">
  <div class="icon">
    fresh lemons
    <img src="https://content.codecademy.com/courses/Sass/lemon.png">
  </div>
  <div class="icon">
    real sugar
    <img src="https://content.codecademy.com/courses/Sass/lemon.png">
  </div>
  <div class="icon">
    dad's recipe
    <img src="https://content.codecademy.com/courses/Sass/lemon.png">
  </div>
</div>  

sass/main.css
-------------
@import url(https://fonts.googleapis.com/css?family=Pacifico);
h1 {
  font-family: Roboto, sans-serif;
  text-align: center;
  vertical-align: middle;
}

.banner {
  font-family: 'Pacifico', cursive;
  height: 400px;
  background-image: url("https://content.codecademy.com/courses/Sass/lemonade2.png");
  border-top: 4px solid black;
  border-bottom: 4px solid black;
}

.banner .slogan {
  background-color: rgba(255, 255, 255, 0.3);
  border: 4px solid black;
  top: 200px;
  left: 25%;
  line-height: 200px;
  width: 50%;
  height: 200px;
}

.banner .slogan span {
  text-align: center;
  vertical-align: middle;
  width: 40%;
  left: 30%;
}

.container {
  font-family: 'Pacifico', cursive;
}

.container .icon {
  display: inline-block;
  margin: 2%;
  border: 4px solid black;
  width: 300px;
  height: 300px;
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------


































